{
  "id": "snapshot_1761405374122_l0x3jwtfu",
  "approvalId": "approval_1761405374119_lu4tqb62l",
  "approvalTitle": "Approve testing-audit design",
  "version": 1,
  "timestamp": "2025-10-25T15:16:14.122Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThis effort introduces a structured testing-audit pipeline that inventories every CLI command, subcommand, and flag (including both `help` and `--help` surfaces), exercises install/uninstall lifecycles across standard and ephemeral modes, and captures reproducible diagnostics for all failures. The design focuses on producing actionable artefacts—command matrices, overlay log snapshots, manifest assertions—so follow-up tickets can address gaps with minimal rediscovery effort.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Maintain POSIX-sh compatibility for new helper scripts so they integrate with existing installer tooling.\n- Reuse established Bats harness patterns located in `tests/helpers/` to keep sandbox creation and Git interactions consistent.\n\n### Project Structure (structure.md)\n- Store new audit automation beside existing integration suites under `tests/`, using `tests/audit/` for matrix runners and fixtures.\n- Persist machine-readable audit outputs (e.g. JSON summaries) under `tests/audit/output/` to avoid touching documentation assets.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`tests/helpers/git_repo.sh`**: Provides sandbox repos, manifest helpers, and installer path resolution for Bats tests.\n- **`tests/lib/git_test_helpers.sh`**: Supplies low-level Git execution, sandbox lifecycle, and file utilities required by new matrix scripts.\n- **`lib/ephemeral_overlay.sh`**: Source of overlay resolution routines; use it to validate observed precedence logs against expected root ordering.\n- **`tests/ephemeral/*.bats`**: Reference for existing ephemeral lifecycle assertions; extend these patterns when adding coverage.\n\n### Integration Points\n- **Installer entrypoint (`install.sh`)**: Audit scripts will invoke the CLI directly using sandbox repositories to exercise flag permutations.\n- **Spec workflow outputs**: The audit will feed findings into structured artefacts (`audit-findings.json`) that downstream spec tasks consume.\n\n## Architecture\n\nThe audit pipeline consists of three layers:\n1. **Command Matrix Runner** (`tests/audit/cli_matrix.sh`): Generates permutations of commands, subcommands, flags, and help invocations, recording exit codes, stdout/stderr checksums, and notable anomalies.\n2. **Lifecycle Verifier** (`tests/audit/lifecycle.bats`): Wraps the runner in Bats tests, performing deep assertions on hooks-path, manifest restoration, overlay ordering, and regression checks for truncated log paths.\n3. **Findings Aggregator** (`tests/audit/report.sh`): Consolidates raw matrix results into sorted JSON and human-readable summaries, highlighting missing automated coverage or failures.\n\n### Modular Design Principles\n- **Single File Responsibility**: Shell runners handle data gathering only; Bats tests perform assertions; the aggregator formats output.\n- **Component Isolation**: Each command domain (install/uninstall, stage family, hooks/config, legacy aliases) has a dedicated Bats test file.\n- **Service Layer Separation**: Helper functions that compute permutations reside in `tests/audit/lib/`, keeping test cases declarative.\n- **Utility Modularity**: Shared formatting utilities (e.g. JSON emitters) will be introduced as separate scripts to avoid entangling auditing logic with installers.\n\n```mermaid\ngraph TD\n    A[cli_matrix.sh] --> B[lifecycle.bats]\n    A --> C[cli_help.bats]\n    B --> D[audit-findings.json]\n    C --> D\n    D --> E[Spec follow-up tasks]\n```\n\n## Components and Interfaces\n\n### Component 1 — CLI Matrix Runner (`tests/audit/cli_matrix.sh`)\n- **Purpose:** Enumerate every command/subcommand/flag/help variant and capture their outputs in sandbox repos.\n- **Interfaces:** `run_matrix <manifest-path>` (writes NDJSON records), `emit_case <command> <args...>`.\n- **Dependencies:** `tests/helpers/git_repo.sh`, core CLI binaries, `jq` (optional—fallback to pure shell JSON writer if unavailable).\n- **Reuses:** Git sandbox helpers for repo setup and teardown.\n\n### Component 2 — Lifecycle Verifier (`tests/audit/lifecycle.bats`)\n- **Purpose:** Assert behaviours around install/uninstall cycles, manifest persistence, overlay ordering, and log completeness.\n- **Interfaces:** Bats tests invoking `matrix_case_assert <case-id> <expectations>`.\n- **Dependencies:** CLI Matrix Runner outputs, `lib/ephemeral_overlay.sh` for expected overlay roots.\n- **Reuses:** Existing ephemeral lifecycle assertions extended with new checks for truncated paths.\n\n### Component 3 — Help Surface Collector (`tests/audit/cli_help.bats` + `tests/audit/lib/help_snapshot.sh`)\n- **Purpose:** Snapshot `help` and `--help` output for every command/subcommand pair, reporting mismatches or missing coverage.\n- **Interfaces:** `collect_help <command>` (returns checksum + path), `assert_help_documented <command>`.\n- **Dependencies:** Installer CLI, matrix runner.\n- **Reuses:** Sandbox helpers; leverages existing usage printers inside `install.sh`.\n\n### Component 4 — Findings Aggregator (`tests/audit/report.sh`)\n- **Purpose:** Convert raw NDJSON into summary tables (`audit-findings.json`, `audit-findings.txt`) detailing failures, missing tests, and suggested follow-ups.\n- **Interfaces:** `build_report <matrix-file> <output-json> <output-text>`.\n- **Dependencies:** Matrix runner output; optional `jq`; fallback to shell string operations.\n- **Reuses:** None beyond POSIX primitives to stay portable.\n\n## Data Models\n\n### `audit_case` record (NDJSON)\n```\n{\n  \"id\": string,              # deterministic case identifier (e.g. install--mode-ephemeral--help)\n  \"command\": string,         # executed command\n  \"args\": [string],          # arguments supplied\n  \"exit_code\": integer,      # process status\n  \"stdout_crc\": string,      # checksum for regression detection\n  \"stderr_crc\": string,      # checksum for regression detection\n  \"hooks_path\": string,      # effective hooks path after command (if applicable)\n  \"overlay_roots\": [string], # ordered roots observed in logs\n  \"notes\": [string]          # anomalies or TODOs\n}\n```\n\n### `audit_summary` record\n```\n{\n  \"case_id\": string,\n  \"status\": \"pass\" | \"fail\" | \"missing-test\",\n  \"issue_type\": \"log-truncation\" | \"flag-gap\" | \"coverage-gap\" | \"alias-divergence\",\n  \"details\": string\n}\n```\n\n## Error Handling\n\n### Error Scenarios\n1. **Matrix execution failure:**\n   - **Handling:** The runner records a `fail` summary with captured stderr and continues processing remaining cases.\n   - **User Impact:** Audit results flag the case for follow-up without aborting the entire run.\n\n2. **Missing dependency (e.g. `jq`):**\n   - **Handling:** Fallback to pure-shell JSON emission; log a warning in `notes` so follow-up tasks can decide whether to vendor tooling.\n   - **User Impact:** Audit completes with slightly less friendly formatting but retains content.\n\n3. **Unexpected help output drift:**\n   - **Handling:** Help collector stores snapshots under `tests/audit/output/help/<case>.txt` and marks the summary as `fail` with diff hints.\n   - **User Impact:** Contributors receive concrete repro steps and captured output for review.\n\n## Testing Strategy\n\n### Unit Testing\n- Add shell-unit tests for new helper libraries (`tests/audit/lib/*.sh`) using Bats to validate permutation generation and JSON formatting in isolation.\n- Introduce checksum verification tests that ensure overlay root logging never truncates path prefixes.\n\n### Integration Testing\n- Extend `tests/ephemeral/lifecycle.bats` with new cases verifying overlay logs, standard mode parity, and manifest restoration under permutations produced by the matrix runner.\n- Add dedicated Bats suites for `stage`, `hooks`, and `config` commands to consume matrix outputs and assert flag/help coverage.\n\n### End-to-End Testing\n- Provide a top-level `tests/audit/run.sh` that executes the full matrix + report pipeline inside CI, emitting summaries and failing the job when new `fail` or `missing-test` entries appear.\n- Document invocation in CI configuration notes (future task) to ensure the audit gate runs before release branches.\n",
  "fileStats": {
    "size": 8090,
    "lines": 132,
    "lastModified": "2025-10-25T15:16:07.863Z"
  },
  "comments": []
}