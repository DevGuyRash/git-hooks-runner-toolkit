{
  "id": "snapshot_1761198780553_25bou7e58",
  "approvalId": "approval_1761198780550_0olga6zt2",
  "approvalTitle": "pre-commit-configured-actions design",
  "version": 1,
  "timestamp": "2025-10-23T05:53:00.553Z",
  "trigger": "initial",
  "status": "pending",
  "content": "## Overview\n\nIntroduce a shared watcher library that powers both the existing `post-merge` example and a new `pre-commit` entrypoint, while migrating example configuration assets into a centralized `{hooks-root}/config` directory (default `.githooks/config`). The design keeps POSIX `sh` compatibility, ensures hooks share a single `watch-configured-actions.yml`, and extends tooling/tests to validate both runtime behaviour and installer behaviour across persistent and ephemeral installs.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Continue using POSIX `sh` and toolkit helper functions (`lib/common.sh`).\n- Avoid external dependencies beyond `jq`/`yq`, retaining graceful degradation when missing.\n- Maintain deterministic logging format established in existing examples.\n\n### Project Structure (structure.md)\n- Place reusable shell helpers in `lib/` alongside existing common utilities.\n- Store new example entrypoint under `examples/` and matching tests under `tests/examples/` to follow current convention.\n- Extend installer behaviour within `install.sh` where example staging logic resides, keeping modifications local to staging helper functions.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`examples/watch-configured-actions.sh`**: Source of diff evaluation, rule parsing, and execution logic to extract into reusable helper functions.\n- **`lib/common.sh`**: Provides logging, repo detection, and helper routines already used by the example.\n- **`install.sh` staging helpers**: Existing logic that copies example assets and respects ephemeral installs; will be extended to detect/configure centralized configs.\n- **`tests/examples/common.sh`** and sandbox utilities (`ghr_*`): Reused for integration-style testing of both entrypoints under temporary repos.\n\n### Integration Points\n- **Hook Runner (`.githooks/_runner.sh`)**: No changes expected; new example will register via metadata comment for `pre-commit` so runner picks it up automatically after staging.\n- **Spec Workflow**: Requirements mention doc updates; design accounts for code hooks emitting warnings when legacy config paths used, enabling docs to instruct migration.\n\n## Architecture\n\n1. **Shared Library Extraction**\n   - Create `lib/watch-configured-actions.sh` exposing functions for config discovery, rule parsing, diff collection, and command execution.\n   - Library operates on caller-provided context (hook name, diff collector) to keep entrypoints thin.\n   - Existing post-merge script becomes a wrapper that sets mode-specific options then calls library.\n\n2. **Hook Entrypoints**\n   - **`examples/watch-configured-actions-post.sh`** (rename existing script or wrap) retains metadata for `post-merge`, `post-rewrite`, `post-checkout`, `post-commit` as needed.\n   - **`examples/watch-configured-actions-pre-commit.sh`** new script: collects staged changes via `git diff --cached --name-only`, configures library to operate in pre-commit context, ensures mark-file handling remains optional.\n\n3. **Centralized Config Resolution**\n   - Library first looks for `${HOOKS_ROOT}/config/watch-configured-actions.yml` (and `.yaml`/`.json`) where `HOOKS_ROOT` comes from `githooks_repo_hooks_dir` (respecting ephemeral temp paths passed by runner/install).\n   - Legacy fallback order preserved (.githooks/watch-config.*) with warning log urging migration.\n\n4. **Installer Enhancements**\n   - Update `install.sh stage add` example asset copier to detect directories named `config` adjacent to scripts and copy them into `{hooks-root}/config/` instead of the hook part directory.\n   - Ensure copies occur per destination (hooksPath, ephemeral temp) without reusing shared global directories.\n\n5. **Tests**\n   - Add `tests/examples/watch_configured_actions_pre_commit.sh` mirroring the post-merge test but targeting staged diffs and centralized config.\n   - Extend existing test utilities to expose hooks-root path for assertions.\n   - Add staging test ensuring config copied to `{hooks-root}/config/watch-configured-actions.yml` in both persistent and ephemeral scenarios.\n\n```mermaid\ngraph TD\n    subgraph Examples\n        P[watch-configured-actions-post.sh]\n        C[watch-configured-actions-pre-commit.sh]\n    end\n    L[lib/watch-configured-actions.sh]\n    I[install.sh staging helpers]\n    CFG[{hooks-root}/config/watch-configured-actions.yml]\n\n    P --> L\n    C --> L\n    I --> CFG\n    L --> CFG\n```\n\n## Components and Interfaces\n\n### Component 1: `lib/watch-configured-actions.sh`\n- **Purpose:** Provide reusable functions for loading configs, collecting changed files, and executing rule-driven commands.\n- **Interfaces:**\n  - `watch_actions_init <hook-name> <hooks-root>`: sets paths, prepares temp files.\n  - `watch_actions_collect_changes <mode> [args...]`: populates change list based on mode (`post`, `pre-commit`).\n  - `watch_actions_run`: loads config/inline rules and executes actions, returning exit status.\n- **Dependencies:** `lib/common.sh`, POSIX utilities (`mktemp`, `grep`, `awk`, `sed`, `jq|yq`).\n- **Reuses:** Extracted logic from current example functions (rule parsing, pattern matching, command execution).\n\n### Component 2: `examples/watch-configured-actions-pre-commit.sh`\n- **Purpose:** `pre-commit` hook entrypoint leveraging shared library.\n- **Interfaces:** CLI invoked by runner; reads `GITHOOKS_HOOK_NAME`, forwards to library.\n- **Dependencies:** `lib/watch-configured-actions.sh`.\n- **Reuses:** Logging/mark-file handling; diff collection specialized for staged changes.\n\n### Component 3: Installer Staging Additions\n- **Purpose:** Copy example configs into centralized location during `stage add`.\n- **Interfaces:** Extend internal function (e.g., `stage_copy_example_assets`) to accept config assets and destination hooks-root.\n- **Dependencies:** File system operations, existing staging metadata parsing.\n- **Reuses:** Current logic that interprets `# githooks-stage` comments and replicates scripts into `.githooks/<hook>.d/`.\n\n### Component 4: Tests (`tests/examples/watch_configured_actions_pre_commit.sh` & staging checks)\n- **Purpose:** Validate new hook, shared library, and installer behaviour.\n- **Interfaces:** Executed by existing test harness; uses `ghr_*` helpers.\n- **Dependencies:** Test sandbox utilities, Git CLI.\n- **Reuses:** Patterns from `watch_configured_actions.sh` test.\n\n## Data Models\n\nConfiguration model remains array-based rules with keys (`name`, `patterns`, `commands`, `continue_on_error`). No schema change; tests ensure compatibility.\n\nMark file format stays key-value pairs as implemented; ensure library exposes consistent writer.\n\n## Error Handling\n\n### Error Scenario 1: Central config missing\n- **Handling:** Log warning with path, exit 0 after writing mark file (if enabled).\n- **User Impact:** Informative message pointing to `.githooks/config/watch-configured-actions.yml`.\n\n### Error Scenario 2: Config parse failure (invalid YAML/JSON)\n- **Handling:** Library surfaces log with offending file and underlying parser error; exit non-zero.\n- **User Impact:** Pre-commit stops; message references docs/README update requirement with centralized config guidance.\n\n### Error Scenario 3: Command execution failure\n- **Handling:** Mirror existing logicâ€”when `continue_on_error` false, exit with command status; otherwise accumulate failure bits and continue.\n- **User Impact:** Consistent failure behaviour across pre and post hooks.\n\n## Testing Strategy\n\n### Unit Testing\n- Extract pure functions (e.g., pattern-to-regex) into library; cover via shell unit tests if practical or rely on existing coverage.\n\n### Integration Testing\n- New pre-commit test that stages files, runs hook via `git commit --no-verify` override disabled to ensure enforcement.\n- Update existing post-merge test to assert library integration unchanged.\n\n### End-to-End Testing\n- Extend staging CLI tests to run `install.sh stage add examples --name 'watch-configured-actions'` in persistent and ephemeral modes, asserting config placement under `{hooks-root}/config/` and warning on legacy fallbacks.\n",
  "fileStats": {
    "size": 8074,
    "lines": 129,
    "lastModified": "2025-10-23T05:52:50.590Z"
  },
  "comments": []
}