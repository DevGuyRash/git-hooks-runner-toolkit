{
  "id": "snapshot_1761100449535_hx4zkc5ax",
  "approvalId": "approval_1761100367519_kon5pd5sl",
  "approvalTitle": "Ephemeral Mode Local Design",
  "version": 2,
  "timestamp": "2025-10-22T02:34:09.535Z",
  "trigger": "approved",
  "status": "pending",
  "content": "## Overview\n\nEphemeral Mode layers a local-only toolkit installation inside `.git/.githooks/`, redirecting `core.hooksPath` to this private root so developers can run toolkit hooks in third-party repositories without touching tracked files. The design preserves the existing `_runner.sh` architecture while introducing an overlay manager, lifecycle controller, and CLI extensions to orchestrate install, upgrade, and uninstall flows.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- POSIX sh compatibility is maintained by reusing current shell libraries in `lib/`.\n- Git interactions rely on `git config`, `git rev-parse`, and existing helper wrappers to stay portable.\n- Hooks continue to execute sequentially via `_runner.sh`, honoring deterministic ordering.\n\n### Project Structure (structure.md)\n- New lifecycle logic lives under `lib/` (e.g., `lib/ephemeral.sh`) mirroring existing modular shell components.\n- CLI entry points remain in `install.sh`, adding `--mode ephemeral` branches instead of new binaries.\n- Ephemeral assets reside at `.git/.githooks/` with subdirectories consistent with versioned installs (`_runner.sh`, `hooks`, `parts`).\n\n## Code Reuse Analysis\n\n- **Existing common.sh helpers:** for logging, error handling, permission checks.\n- **Current `_runner.sh`:** reused without fork; ephemeral-specific configuration supplies contextual environment variables.\n- **Stage management utilities:** leveraged for hook discovery and part ordering logic.\n\n### Existing Components to Leverage\n- **`lib/config.sh`:** extend to snapshot and restore `core.hooksPath` and detect custom values.\n- **`lib/install_common.sh`:** share directory creation logic and stub templating.\n\n### Integration Points\n- **Git CLI:** local `git config --local` updates for hooks path.\n- **File system layout:** interacts with `.git/hooks`, `.git/.githooks/`, and optional versioned `.githooks/`.\n\n## Architecture\n\nEphemeral Mode introduces a lifecycle consisting of (1) detection, (2) provisioning ephemeral directories, (3) configuring Git, (4) managing overlay precedence, and (5) teardown. Execution continues through `_runner.sh`, which reads hook parts from ordered roots that include ephemeral and optionally versioned directories.\n\n### Modular Design Principles\n- **Single File Responsibility:** `lib/ephemeral_lifecycle.sh` handles install/uninstall; `lib/ephemeral_overlay.sh` handles root resolution.\n- **Component Isolation:** CLI dispatch code only delegates; business logic resides in lib modules; runner behavior remains isolated.\n- **Service Layer Separation:** config snapshots, filesystem operations, and CLI messaging are distinct functions.\n- **Utility Modularity:** shared helpers for traps, permission setting, and logging avoid duplication.\n\n```mermaid\ngraph TD\n    CLI[install.sh --mode ephemeral] --> Detect[Detect Existing State]\n    Detect --> Provision[Provision .git/.githooks/]\n    Provision --> Configure[Set core.hooksPath]\n    Configure --> Overlay[Resolve Hook Roots]\n    Overlay --> Runner[_runner.sh Execution]\n    Runner --> Teardown[Uninstall/Restore]\n```\n\n## Components and Interfaces\n\n### EphemeralLifecycle (lib/ephemeral_lifecycle.sh)\n- **Purpose:** Orchestrate install, refresh, and uninstall flows.\n- **Interfaces:** `ephemeral_install`, `ephemeral_refresh`, `ephemeral_uninstall`.\n- **Dependencies:** `lib/config.sh`, `lib/filesystem.sh`, `lib/logging.sh`.\n- **Reuses:** directory creation utilities, permission helpers, trap registration.\n\n### EphemeralOverlay (lib/ephemeral_overlay.sh)\n- **Purpose:** Determine hook part search roots and precedence.\n- **Interfaces:** `ephemeral_resolve_roots`, `ephemeral_print_roots`, `ephemeral_apply_precedence_config`.\n- **Dependencies:** repository detection utilities, environment/config getters.\n- **Reuses:** existing stage listing logic for `.githooks/<hook>.d` structure.\n\n### CLI Dispatcher (install.sh)\n- **Purpose:** Parse `--mode ephemeral` arguments for install/uninstall.\n- **Interfaces:** `handle_install_ephemeral`, `handle_uninstall_ephemeral`.\n- **Dependencies:** argument parser, lifecycle functions.\n- **Reuses:** existing messaging patterns for install/uninstall confirmation.\n\n## Data Models\n\n### Ephemeral State Manifest\n```\nmanifest.sh\n- VERSION=<semver>\n- PREVIOUS_CORE_HOOKS_PATH=<string or empty>\n- PRECEDENCE_MODE=<ephemeral-first|versioned-first|merge>\n- ROOTS=<colon-separated list>\n```\n\n### Hook Roots Configuration\n```\nhooks_roots.conf\n- root[0]=.git/.githooks/parts\n- root[1]=.githooks/parts (optional)\n- root[n]=<user-defined>\n```\n\n## Error Handling\n\n### Error Scenarios\n1. **core.hooksPath Mutations Fail**\n   - **Handling:** Abort install, restore snapshot, warn user; exit non-zero.\n   - **User Impact:** Message instructing to inspect Git config permissions.\n\n2. **Ephemeral Directory Creation Fails**\n   - **Handling:** Abort, print permission guidance, leave repo untouched.\n   - **User Impact:** Clear error stating location and required action.\n\n3. **Overlay Detection Conflict**\n   - **Handling:** Log conflicting roots, default to safe precedence, guide user to configure explicitly.\n   - **User Impact:** Warning message referencing docs section.\n\n## Testing Strategy\n\n### Unit Testing\n- Shell unit tests verifying lifecycle functions set up directories and configs correctly.\n- Mock Git config interactions to ensure snapshot/restore logic.\n\n### Integration Testing\n- End-to-end script that installs ephemeral mode, runs sample hooks, performs `git reset --hard`, and validates persistence.\n- Test overlay precedence when both ephemeral and versioned roots are present.\n\n### End-to-End Testing\n- Manual validation across Linux, macOS, and Windows Git Bash verifying install/uninstall idempotence and hook execution order.\n",
  "fileStats": {
    "size": 5766,
    "lines": 117,
    "lastModified": "2025-10-22T02:32:42.403Z"
  },
  "comments": []
}